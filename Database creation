title: "CFB Predictor"
author: "Quinn Schroeder"
date: "9/18/2021"
output:
  pdf_document: default
  html_document: default
---

# Load in libraries 
```{r}
library(ALSM)
library(car)
library(onewaytests)
library(MASS)
library(lmridge)
library(caret)
library(dplyr)
library(pacman)
library(ggplot2)
library(rvest)
library(plyr)
library(stringr)
library(randomForest)
```

# Make Database 2000-2020 Training Data
```{r}
# Scrape Data for Building Model

#Offense Stats
years = c(2000:2020)
urls = list()
for (i in 1:length(years)) {
  url = paste0('https://www.sports-reference.com/cfb/years/', years[i],'-team-offense.html')
  urls[[i]] = url
}

tbl = list()
years = 2000
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Offense = ldply(tbl, data.frame)

names(Offense) <- as.matrix(Offense[1,])
Offense <- Offense[-1,]
Offense[] <- lapply(Offense, function(x) type.convert(as.character(x)))

names(Offense)[names(Offense) == "2000"] <- "Year"
Offense$Season <- paste(Offense$School, Offense$Year, sep=" ")
Offense$PassCompletions <- Offense[,5]
Offense$PassAtt <- Offense[,6]
Offense$CompletionPer <- Offense[,7]
Offense$PassYrds <- Offense[,8]
Offense$PassTD <- Offense[,9]
Offense$RushAtt <- Offense[,10]
Offense$RushYrds <- Offense[,11]
Offense$RushAvg <- Offense[,12]
Offense$RushTD <- Offense[,13]
Offense$TotYrds <- Offense[,15]
Offense$YPP <- Offense[,16]   # Yards per play
Offense$PassFirstDwns <- Offense[,17]
Offense$RushFirstDwns <- Offense[,18]
Offense$PenFirstDwns <- Offense[,19]
Offense$TotFirstDwns <- Offense[,20]
Offense$Pens <- Offense[,21]
Offense$PenYrds <- Offense[,22]
Offense$Tov <- Offense[,25]

Offense <- Offense[,c(27,2,26,3,4,14,28:44,24,23,45)]

#Defense Stats
years = c(2000:2020)
urls = list()
for (i in 1:length(years)) {
  url = paste0('https://www.sports-reference.com/cfb/years/', years[i],'-team-defense.html')
  urls[[i]] = url
}

tbl = list()
years = 2000
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Defense = ldply(tbl, data.frame)

names(Defense) <- as.matrix(Defense[1,])
Defense <- Defense[-1,]
Defense[] <- lapply(Defense, function(x) type.convert(as.character(x)))

names(Defense)[names(Defense) == "2000"] <- "Year"
Defense$OppSeason <- paste(Defense$School, Defense$Year, sep=" ")
Defense$Season <- paste(Defense$School, Defense$Year, sep=" ")

Defense$PAPG <- Defense[,4]
Defense$O_PassCompletions <- Defense[,5]
Defense$O_PassAtt <- Defense[,6]
Defense$O_CompletionPer <- Defense[,7]
Defense$O_PassYrds <- Defense[,8]
Defense$O_PassTD <- Defense[,9]
Defense$O_RushAtt <- Defense[,10]
Defense$O_RushYrds <- Defense[,11]
Defense$O_RushAvg <- Defense[,12]
Defense$O_RushTD <- Defense[,13]
Defense$O_TotYrds <- Defense[,15]
Defense$O_YPP <- Defense[,16] # Opponent Yards Per Play
Defense$O_PassFirstDowns <- Defense[,17]
Defense$O_RushFirstDowns <- Defense[,18]
Defense$O_PenFirstDowns <- Defense[,19]
Defense$O_TotFirstDowns <- Defense[,20]
Defense$O_Pens <- Defense[,21]
Defense$O_PenYrds <- Defense[,22]
Defense$O_Fum <- Defense[,23]
Defense$O_Int <- Defense[,24]
Defense$O_Tov <- Defense[,25]

Defense <- Defense[,c(27,28,2,26,29:48)]

#Special Teams Stats
years = c(2000:2020)
urls = list()
for (i in 1:length(years)) {
  url = paste0('https://www.sports-reference.com/cfb/years/', years[i],'-special-teams.html')
  urls[[i]] = url
}

tbl = list()
years = 2000
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

SpecialTm = ldply(tbl, data.frame)

names(SpecialTm) <- as.matrix(SpecialTm[1,])
SpecialTm <- SpecialTm[-1,]
SpecialTm[] <- lapply(SpecialTm, function(x) type.convert(as.character(x)))

names(SpecialTm)[names(SpecialTm) == "2000"] <- "Year"

SpecialTm$Season <- paste(SpecialTm$School, SpecialTm$Year, sep=" ")

SpecialTm$KO_Returns <- SpecialTm[,14] 
SpecialTm$KO_ReturnYrd <- SpecialTm[,15] 
SpecialTm$KO_ReturnAvg <- SpecialTm[,16] 
SpecialTm$KO_ReturnTD <- SpecialTm[,17] 
SpecialTm$Punt_Returns <- SpecialTm[,18] 
SpecialTm$Punt_ReturnYrd <- SpecialTm[,19]
SpecialTm$Punt_ReturnAvg <- SpecialTm[,20]
SpecialTm$Punt_ReturnTD <- SpecialTm[,21]

SpecialTm <- SpecialTm[,-c(1,3,14:21)]

# Merge into Datasets to use for team and opponent projections
CFB_Tm = join(Offense,SpecialTm, by = 'Season', type = 'left', match = 'first')
CFB_Opp = join(Defense,SpecialTm, by = 'Season', type = 'left', match = 'first')

CFB_Tm <- CFB_Tm[!grepl("Passing", CFB_Tm$PassAtt),]
CFB_Tm <- CFB_Tm[!grepl("School", CFB_Tm$School),]
CFB_Opp <- CFB_Opp[!grepl("Passing", CFB_Opp$O_PassAtt),]
CFB_Opp <- CFB_Opp[!grepl("School", CFB_Opp$School),]

CFB_Tm <- CFB_Tm[,c(1:26,28:37,39:46)]
CFB_Opp <- CFB_Opp[,c(2:24,26:35,37:44)]

names(CFB_Tm)[names(CFB_Tm) == "Pts.1"] <- "KickingPts"
names(CFB_Tm)[names(CFB_Tm) == "Avg"] <- "PuntAvg"

names(CFB_Opp)[names(CFB_Opp) == "XPM"] <- "O_XPM"
names(CFB_Opp)[names(CFB_Opp) == "XPA"] <- "O_XPA"
names(CFB_Opp)[names(CFB_Opp) == "XP%"] <- "O_XP%"
names(CFB_Opp)[names(CFB_Opp) == "FGM"] <- "O_FGM"
names(CFB_Opp)[names(CFB_Opp) == "FGA"] <- "O_FGA"
names(CFB_Opp)[names(CFB_Opp) == "FG%"] <- "O_FG%"
names(CFB_Opp)[names(CFB_Opp) == "Pts"] <- "O_KickingPts"
names(CFB_Opp)[names(CFB_Opp) == "Punts"] <- "O_Punts"
names(CFB_Opp)[names(CFB_Opp) == "Yds"] <- "O_PuntYds"
names(CFB_Opp)[names(CFB_Opp) == "Avg"] <- "O_PuntAvg"
names(CFB_Opp)[names(CFB_Opp) == "KO_Returns"] <- "O_KO_Returns"
names(CFB_Opp)[names(CFB_Opp) == "KO_ReturnYrd"] <- "O_KO_ReturnYrd"
names(CFB_Opp)[names(CFB_Opp) == "KO_ReturnAvg"] <- "O_KO_ReturnAvg"
names(CFB_Opp)[names(CFB_Opp) == "KO_ReturnTD"] <- "O_KO_ReturnTD"
names(CFB_Opp)[names(CFB_Opp) == "Punt_Returns"] <- "O_Punt_Returns"
names(CFB_Opp)[names(CFB_Opp) == "Punt_ReturnYrd"] <- "O_Punt_ReturnYrd"
names(CFB_Opp)[names(CFB_Opp) == "Punt_ReturnAvg"] <- "O_Punt_ReturnAvg"
names(CFB_Opp)[names(CFB_Opp) == "Punt_ReturnTD"] <- "O_Punt_ReturnTD"

rm(Defense,Offense,SpecialTm,tbl,urls)

# Scrape Schedule
years = c(2000:2020)
urls = list()
for (i in 1:length(years)) {
  url = paste0('https://www.sports-reference.com/cfb/years/', years[i],'-schedule.html')
  urls[[i]] = url
}

tbl = list()
years = 2000
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Schedule = ldply(tbl, data.frame)

Schedule <- Schedule %>%
  select("Winner","Pts","Loser","Pts.1","Year")
temp <- Schedule %>%
  select("Loser","Pts.1","Winner","Year")

names(Schedule)[names(Schedule) == "Winner"] <- "Team"
names(Schedule)[names(Schedule) == "Pts"] <- "aP"
names(Schedule)[names(Schedule) == "Loser"] <- "Opp"
names(temp)[names(temp) == "Loser"] <- "Team"
names(temp)[names(temp) == "Pts.1"] <- "aP"
names(temp)[names(temp) == "Winner"] <- "Opp"

Schedule <- Schedule[,-4]

Schedule <- rbind(Schedule, temp)

Schedule$Team <- str_replace_all(Schedule$Team, "[:digit:]", "")
Schedule$Team <- str_replace_all(Schedule$Team, "[()]", "")
Schedule$Team <- str_trim(Schedule$Team)
Schedule$Team <- str_replace_all(Schedule$Team, "Miami OH", "Miami (OH)")
Schedule$Team <- str_replace_all(Schedule$Team, "Miami FL", "Miami (FL)")

Schedule$Opp <- str_replace_all(Schedule$Opp, "[:digit:]", "")
Schedule$Opp <- str_replace_all(Schedule$Opp, "[()]", "")
Schedule$Opp <- str_trim(Schedule$Opp)
Schedule$Opp <- str_replace_all(Schedule$Opp, "Miami OH", "Miami (OH)")
Schedule$Opp <- str_replace_all(Schedule$Opp, "Miami FL", "Miami (FL)")

Schedule <- Schedule[!grepl("Winner", Schedule$Team),]
Schedule <- Schedule[!grepl("Loser", Schedule$Team),]

Schedule$Season <- paste(Schedule$Team, Schedule$Year, sep=" ")
Schedule$OppSeason <- paste(Schedule$Opp, Schedule$Year, sep=" ")

rm(temp,i,j,tbl,urls,url,years)

# Combine Stats and Schedule

Final <- join(Schedule,CFB_Tm, by = 'Season', type = 'left', match = 'all')
Final <- join(Final,CFB_Opp, by = 'OppSeason', type = 'left', match = 'all')

Final <- Final[,-c(5:9,50:51)]
Final <- Final[complete.cases(Final),]

# Write into saved database to limit later run time
write.csv(Final, "C:\\Users\\qschr\\OneDrive\\Desktop\\NCAA\\CFB.csv", row.names = TRUE)
```

# Read Database
```{r}
CFB <- read.csv("C:\\Users\\qschr\\OneDrive\\Desktop\\NCAA\\CFB.csv", header = TRUE, sep = ",")
CFB <- CFB[,-1]
```

# Linear Model
```{r}
full_mod <- lm(aP ~ Pts + Plays + PassCompletions + PassAtt + CompletionPer + PassYrds + PassTD + RushAtt + RushYrds + RushAvg + RushTD + TotYrds + YPP + PassFirstDwns + RushFirstDwns + PenFirstDwns + TotFirstDwns + Pens + PenYrds + Int + Fum + Tov + XPM + XPA + XP. + FGM + FGA + FG. + KickingPts + Punts + Yds + PuntAvg + KO_Returns + KO_ReturnYrd + KO_ReturnAvg + KO_ReturnTD + Punt_Returns + Punt_ReturnYrd + Punt_ReturnAvg + Punt_ReturnTD + PAPG + O_PassCompletions + O_PassAtt + O_CompletionPer + O_PassYrds + O_PassTD + O_RushAtt + O_RushYrds + O_RushAvg + O_RushTD + O_TotYrds + O_YPP + O_PassFirstDowns + O_RushFirstDowns + O_PenFirstDowns + O_TotFirstDowns + O_Pens + O_PenYrds + O_Fum + O_Int + O_XPM + O_XPA + O_XP. + O_FGM + O_FGA + O_FG. + O_KickingPts + O_Punts + O_PuntYds + O_PuntAvg + O_KO_Returns + O_KO_ReturnYrd + O_KO_ReturnAvg + O_KO_ReturnTD + O_Punt_Returns + O_Punt_ReturnYrd + O_Punt_ReturnAvg + O_Punt_ReturnTD, CFB)

Anova(full_mod,Type = II)
summary(full_mod)

# Reduced Model
mod1 <- lm(aP ~ Pts + PassCompletions + CompletionPer + RushAtt + PassFirstDwns + Pens + PenYrds + XPM + XPA + KO_Returns + Punt_Returns + PAPG + O_PassCompletions + O_PassTD + O_RushTD + O_YPP + O_PassFirstDowns + O_PenYrds + O_Fum + O_FGM + O_KickingPts + O_Punts + O_PuntAvg + O_KO_Returns + O_KO_ReturnAvg, CFB)

Anova(mod1,Type = II)
summary(mod1)

# Test interactions and normalize


```

# Random Forest
```{r}
rf1 <- randomForest(aP ~ Pts + Plays + PassCompletions + PassAtt + CompletionPer + PassYrds + PassTD + RushAtt + RushYrds + RushAvg + RushTD + TotYrds + YPP + PassFirstDwns + RushFirstDwns + PenFirstDwns + TotFirstDwns + Pens + PenYrds + Int + Fum + Tov + XPM + XPA + XP. + FGM + FGA + FG. + KickingPts + Punts + Yds + PuntAvg + KO_Returns + KO_ReturnYrd + KO_ReturnAvg + KO_ReturnTD + Punt_Returns + Punt_ReturnYrd + Punt_ReturnAvg + Punt_ReturnTD + PAPG + O_PassCompletions + O_PassAtt + O_CompletionPer + O_PassYrds + O_PassTD + O_RushAtt + O_RushYrds + O_RushAvg + O_RushTD + O_TotYrds + O_YPP + O_PassFirstDowns + O_RushFirstDowns + O_PenFirstDowns + O_TotFirstDowns + O_Pens + O_PenYrds + O_Fum + O_Int + O_XPM + O_XPA + O_XP. + O_FGM + O_FGA + O_FG. + O_KickingPts + O_Punts + O_PuntYds + O_PuntAvg + O_KO_Returns + O_KO_ReturnYrd + O_KO_ReturnAvg + O_KO_ReturnTD + O_Punt_Returns + O_Punt_ReturnYrd + O_Punt_ReturnAvg + O_Punt_ReturnTD, data = CFB, na.action = na.omit, proximity = FALSE, ntree = 500)
```

# 2021 Data - Testing Data
```{r}
#Offense Stats
urls = list()
urls[[1]] = paste0('https://www.sports-reference.com/cfb/years/2021-team-offense.html')

tbl = list()
years = 2021
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Offense21 = ldply(tbl, data.frame)

names(Offense21) <- as.matrix(Offense21[1,])
Offense21 <- Offense21[-1,]
Offense21[] <- lapply(Offense21, function(x) type.convert(as.character(x)))

names(Offense21)[names(Offense21) == "2021"] <- "Year"
Offense21$Season <- paste(Offense21$School, Offense21$Year, sep=" ")
Offense21$PassCompletions <- Offense21[,5]
Offense21$PassAtt <- Offense21[,6]
Offense21$CompletionPer <- Offense21[,7]
Offense21$PassYrds <- Offense21[,8]
Offense21$PassTD <- Offense21[,9]
Offense21$RushAtt <- Offense21[,10]
Offense21$RushYrds <- Offense21[,11]
Offense21$RushAvg <- Offense21[,12]
Offense21$RushTD <- Offense21[,13]
Offense21$TotYrds <- Offense21[,15]
Offense21$YPP <- Offense21[,16]   # Yards per play
Offense21$PassFirstDwns <- Offense21[,17]
Offense21$RushFirstDwns <- Offense21[,18]
Offense21$PenFirstDwns <- Offense21[,19]
Offense21$TotFirstDwns <- Offense21[,20]
Offense21$Pens <- Offense21[,21]
Offense21$PenYrds <- Offense21[,22]
Offense21$Tov <- Offense21[,25]

Offense21 <- Offense21[,c(27,2,26,3,4,14,28:44,24,23,45)]

#Defense Stats
urls = list()
urls[[1]] = paste0('https://www.sports-reference.com/cfb/years/2021-team-defense.html')

tbl = list()
years = 2021
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Defense21 = ldply(tbl, data.frame)

names(Defense21) <- as.matrix(Defense21[1,])
Defense21 <- Defense21[-1,]
Defense21[] <- lapply(Defense21, function(x) type.convert(as.character(x)))

names(Defense21)[names(Defense21) == "2021"] <- "Year"
Defense21$OppSeason <- paste(Defense21$School, Defense21$Year, sep=" ")
Defense21$Season <- paste(Defense21$School, Defense21$Year, sep=" ")

Defense21$PAPG <- Defense21[,4]
Defense21$O_PassCompletions <- Defense21[,5]
Defense21$O_PassAtt <- Defense21[,6]
Defense21$O_CompletionPer <- Defense21[,7]
Defense21$O_PassYrds <- Defense21[,8]
Defense21$O_PassTD <- Defense21[,9]
Defense21$O_RushAtt <- Defense21[,10]
Defense21$O_RushYrds <- Defense21[,11]
Defense21$O_RushAvg <- Defense21[,12]
Defense21$O_RushTD <- Defense21[,13]
Defense21$O_TotYrds <- Defense21[,15]
Defense21$O_YPP <- Defense21[,16] # Opponent Yards Per Play
Defense21$O_PassFirstDowns <- Defense21[,17]
Defense21$O_RushFirstDowns <- Defense21[,18]
Defense21$O_PenFirstDowns <- Defense21[,19]
Defense21$O_TotFirstDowns <- Defense21[,20]
Defense21$O_Pens <- Defense21[,21]
Defense21$O_PenYrds <- Defense21[,22]
Defense21$O_Fum <- Defense21[,23]
Defense21$O_Int <- Defense21[,24]
Defense21$O_Tov <- Defense21[,25]

Defense21 <- Defense21[,c(27,28,2,26,29:48)]

#Special Teams Stats
urls = list()
urls[[1]] = paste0('https://www.sports-reference.com/cfb/years/2021-special-teams.html')

tbl = list()
years = 2021
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

SpecialTm21 = ldply(tbl, data.frame)

names(SpecialTm21) <- as.matrix(SpecialTm21[1,])
SpecialTm21 <- SpecialTm21[-1,]
SpecialTm21[] <- lapply(SpecialTm21, function(x) type.convert(as.character(x)))

names(SpecialTm21)[names(SpecialTm21) == "2021"] <- "Year"

SpecialTm21$Season <- paste(SpecialTm21$School, SpecialTm21$Year, sep=" ")

SpecialTm21$KO_Returns <- SpecialTm21[,14] 
SpecialTm21$KO_ReturnYrd <- SpecialTm21[,15] 
SpecialTm21$KO_ReturnAvg <- SpecialTm21[,16] 
SpecialTm21$KO_ReturnTD <- SpecialTm21[,17] 
SpecialTm21$Punt_Returns <- SpecialTm21[,18] 
SpecialTm21$Punt_ReturnYrd <- SpecialTm21[,19]
SpecialTm21$Punt_ReturnAvg <- SpecialTm21[,20]
SpecialTm21$Punt_ReturnTD <- SpecialTm21[,21]

SpecialTm21 <- SpecialTm21[,-c(1,3,14:21)]

# Merge into Datasets to use for team and opponent projections
CFB_Tm21 = join(Offense21,SpecialTm21, by = 'Season', type = 'left', match = 'first')
CFB_Opp21 = join(Defense21,SpecialTm21, by = 'Season', type = 'left', match = 'first')

CFB_Tm21 <- CFB_Tm21[!grepl("Passing", CFB_Tm21$PassAtt),]
CFB_Tm21 <- CFB_Tm21[!grepl("School", CFB_Tm21$School),]
CFB_Opp21 <- CFB_Opp21[!grepl("Passing", CFB_Opp21$O_PassAtt),]
CFB_Opp21 <- CFB_Opp21[!grepl("School", CFB_Opp21$School),]

CFB_Tm21 <- CFB_Tm21[,c(1:26,28:37,39:46)]
CFB_Opp21 <- CFB_Opp21[,c(2:24,26:35,37:44)]

names(CFB_Tm21)[names(CFB_Tm21) == "Pts.1"] <- "KickingPts"
names(CFB_Tm21)[names(CFB_Tm21) == "Avg"] <- "PuntAvg"

names(CFB_Opp21)[names(CFB_Opp21) == "XPM"] <- "O_XPM"
names(CFB_Opp21)[names(CFB_Opp21) == "XPA"] <- "O_XPA"
names(CFB_Opp21)[names(CFB_Opp21) == "XP%"] <- "O_XP%"
names(CFB_Opp21)[names(CFB_Opp21) == "FGM"] <- "O_FGM"
names(CFB_Opp21)[names(CFB_Opp21) == "FGA"] <- "O_FGA"
names(CFB_Opp21)[names(CFB_Opp21) == "FG%"] <- "O_FG%"
names(CFB_Opp21)[names(CFB_Opp21) == "Pts"] <- "O_KickingPts"
names(CFB_Opp21)[names(CFB_Opp21) == "Punts"] <- "O_Punts"
names(CFB_Opp21)[names(CFB_Opp21) == "Yds"] <- "O_PuntYds"
names(CFB_Opp21)[names(CFB_Opp21) == "Avg"] <- "O_PuntAvg"
names(CFB_Opp21)[names(CFB_Opp21) == "KO_Returns"] <- "O_KO_Returns"
names(CFB_Opp21)[names(CFB_Opp21) == "KO_ReturnYrd"] <- "O_KO_ReturnYrd"
names(CFB_Opp21)[names(CFB_Opp21) == "KO_ReturnAvg"] <- "O_KO_ReturnAvg"
names(CFB_Opp21)[names(CFB_Opp21) == "KO_ReturnTD"] <- "O_KO_ReturnTD"
names(CFB_Opp21)[names(CFB_Opp21) == "Punt_Returns"] <- "O_Punt_Returns"
names(CFB_Opp21)[names(CFB_Opp21) == "Punt_ReturnYrd"] <- "O_Punt_ReturnYrd"
names(CFB_Opp21)[names(CFB_Opp21) == "Punt_ReturnAvg"] <- "O_Punt_ReturnAvg"
names(CFB_Opp21)[names(CFB_Opp21) == "Punt_ReturnTD"] <- "O_Punt_ReturnTD"

# Schedule
urls = list()
urls[[1]] = paste0('https://www.sports-reference.com/cfb/years/2021-schedule.html')

tbl = list()
years = 2021
j = 1
for (j in seq_along(urls)) {
  tbl[[j]] = urls[[j]] %>%
    read_html() %>%
    html_node("table") %>%
    html_table() 
  tbl[[j]]$Year = years
  years = years+1
}

Schedule21 = ldply(tbl, data.frame)

Schedule21 <- Schedule21 %>%
  select("Winner","Pts","Loser","Pts.1","Year","Wk")
temp <- Schedule21 %>%
  select("Loser","Pts.1","Winner","Year", "Wk")

names(Schedule21)[names(Schedule21) == "Winner"] <- "Team"
names(Schedule21)[names(Schedule21) == "Pts"] <- "aP"
names(Schedule21)[names(Schedule21) == "Loser"] <- "Opp"
names(temp)[names(temp) == "Loser"] <- "Team"
names(temp)[names(temp) == "Pts.1"] <- "aP"
names(temp)[names(temp) == "Winner"] <- "Opp"

Schedule21 <- Schedule21[,-4]

Schedule21 <- rbind(Schedule21, temp)

Schedule21$Team <- str_replace_all(Schedule21$Team, "[:digit:]", "")
Schedule21$Team <- str_replace_all(Schedule21$Team, "[()]", "")
Schedule21$Team <- str_trim(Schedule21$Team)
Schedule21$Team <- str_replace_all(Schedule21$Team, "Miami OH", "Miami (OH)")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Miami FL", "Miami (FL)")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Nevada-Las Vegas", "UNLV")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Texas-El Paso", "UTEP")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Alabama-Birmingham", "UAB")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Central Florida", "UCF")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Pittsburgh", "Pitt")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Southern California", "USC")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Southern Methodist", "SMU")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Nevada-Las Vegas", "UNLV")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Texas-San Antonio", "UTSA")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Mississippi", "Ole Miss")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Nevada-Las Vegas", "UNLV")
Schedule21$Team <- str_replace_all(Schedule21$Team, "Louisiana State", "LSU")

Schedule21$Opp <- str_replace_all(Schedule21$Opp, "[:digit:]", "")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "[()]", "")
Schedule21$Opp <- str_trim(Schedule21$Opp)
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Miami OH", "Miami (OH)")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Miami FL", "Miami (FL)")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Nevada-Las Vegas", "UNLV")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Texas-El Paso", "UTEP")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Alabama-Birmingham", "UAB")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Central Florida", "UCF")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Pittsburgh", "Pitt")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Southern California", "USC")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Southern Methodist", "SMU")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Nevada-Las Vegas", "UNLV")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Texas-San Antonio", "UTSA")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Mississippi", "Ole Miss")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Nevada-Las Vegas", "UNLV")
Schedule21$Opp <- str_replace_all(Schedule21$Opp, "Louisiana State", "LSU")

Schedule21 <- Schedule21[!grepl("Winner", Schedule21$Team),]
Schedule21 <- Schedule21[!grepl("Loser", Schedule21$Team),]

Schedule21$Season <- paste(Schedule21$Team, Schedule21$Year, sep=" ")
Schedule21$OppSeason <- paste(Schedule21$Opp, Schedule21$Year, sep=" ")

Final21 <- join(Schedule21,CFB_Tm21, by = 'Season', type = 'left', match = 'all')
Final21 <- join(Final21,CFB_Opp21, by = 'OppSeason', type = 'left', match = 'all')

Final21 <- Final21[,-c(6:10,51:52)]
Final21 <- Final21[complete.cases(Final21),]
Final21[is.na(Final21)] <- 0

write.csv(Final21, "C:\\Users\\qschr\\OneDrive\\Desktop\\NCAA\\CFB2021.csv", row.names = TRUE)

rm(CFB_Opp21, CFB_Tm21, Defense21, Offense21, Schedule21, SpecialTm21, Final21, tbl, urls, j, years, temp)
```

# Model Selection
```{r}
TestData <- read.csv("C:\\Users\\qschr\\OneDrive\\Desktop\\NCAA\\CFB2021.csv", header = TRUE, sep = ",")
TestData <- TestData[,-1]
TestData$aP[is.na(TestData$aP)] <- "Not Played"
TestData <- TestData[!grepl("Not Played", TestData$aP),]
TestData[is.na(TestData)] <- 0
TestData$aP <- as.numeric(TestData$aP)

predictions <- predict(mod1, TestData)
predictions2 <- predict(rf1, TestData)
data.frame( R2_1 = R2(predictions, TestData$aP),
            RMSE_1 = RMSE(predictions, TestData$aP),
            MAE_1 = MAE(predictions, TestData$aP),
            R2 = R2(predictions2, TestData$aP),
            RMSE = RMSE(predictions2, TestData$aP),
            MAE = MAE(predictions2, TestData$aP))

# Very very similar, RF is slightly better
# Using average of the two methods for prediction

rm(predictions,predictions2,TestData)
```

Current Week
```{r}
CFB2021 <- read.csv("C:\\Users\\qschr\\OneDrive\\Desktop\\NCAA\\CFB2021.csv", header = TRUE, sep = ",")
CFB2021 <- CFB2021[,-c(1,3)]
CFB2021[is.na(CFB2021)] <- 0
Current_Wk <- CFB2021[grepl("6", CFB2021$Wk),]
#Current_Wk <- Current_Wk[!grepl("15", Current_Wk$Wk),]
Current_Wk$TmPts <- predict(mod1, newdata = Current_Wk)
Current_Wk$TmPts <- round(Current_Wk$TmPts,2)
Current_Wk$p1 <- predict(rf1, Current_Wk)
Current_Wk$p1 <- round(Current_Wk$p1,2)
Current_Wk <- Current_Wk[,c(1:4,83,84)]
for (i in 1:length(Current_Wk$Team)) {
  for (j in 1:length(Current_Wk$Opp)) {
    Current_Wk$OppPts[i] <- ifelse(Current_Wk$Team[i] == Current_Wk$Opp[j],Current_Wk$TmPts[j],"")
    ifelse(Current_Wk$OppPts[i] == Current_Wk$TmPts[j], break, next)
  }
}
for (i in 1:length(Current_Wk$Team)) {
  for (j in 1:length(Current_Wk$Opp)) {
    Current_Wk$OppP1[i] <- ifelse(Current_Wk$Team[i] == Current_Wk$Opp[j],Current_Wk$p1[j],"")
    ifelse(Current_Wk$OppP1[i] == Current_Wk$p1[j], break, next)
  }
}

Current_Wk$OppPts <- as.numeric(Current_Wk$OppPts)
Current_Wk$OppP1 <- as.numeric(Current_Wk$OppP1)

for (i in 1:length(Current_Wk$Team)) {
  Current_Wk$ProjPts[i] <- round((Current_Wk$TmPts[i] + Current_Wk$p1[i])/2,2)
  Current_Wk$OppProjPts[i] <- round((Current_Wk$OppPts[i]+Current_Wk$OppP1[i])/2,2)
  Current_Wk$Winner[i] <- ifelse(Current_Wk$ProjPts[i] > Current_Wk$OppProjPts[i],Current_Wk$Team[i],Current_Wk$Opp[i])
  Current_Wk$Spread[i] <- ifelse(Current_Wk$Winner[i] == Current_Wk$Team[i], Current_Wk$ProjPts[i] - Current_Wk$OppProjPts[i], Current_Wk$OppProjPts[i] - Current_Wk$ProjPts[i])
}

dist <- length(Current_Wk$Team)/2
Current_Wk <- Current_Wk[1:dist,c("Year","Wk","Team","Opp","ProjPts","OppProjPts","Winner","Spread")]

rm(i, j, dist)
```
